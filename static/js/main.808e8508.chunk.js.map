{"version":3,"sources":["api/places.js","components/search/index.js","api/weather.js","components/utils.js","components/current-weather/index.js","components/daily-weather/index.js","components/hourly-weather/index.js","components/weather-landing/index.js","components/app/index.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","search","searchText","get","params","key","process","q","no_annotations","abbrv","then","response","data","results","map","formatted","geometry","name","lat","lon","lng","Search","useState","locations","setLocations","setSearchText","isLoading","setIsLoading","error","setError","doSearch","a","places","length","id","className","TextField","placeholder","onChange","e","target","value","onKeyDown","keyCode","disabled","Button","variant","color","onClick","location","to","qs","convertDate","dt","timezone","utcToZonedTime","getIconUrl","weather","useLarge","icon","extractCurrentWeather","temp","feels_like","humidity","uvi","wind_speed","temperature","description","feelsLike","wind","uvIndex","date","extractDailyForecast","daily","sunrise","sunset","min","max","extractHourlyForecast","hourly","getWeather","units","appid","current","displayTemp","Math","round","CurrentWeather","conditions","src","alt","DailyWeather","forecast","TableContainer","Table","size","stickyHeader","TableHead","TableRow","TableCell","TableBody","index","data-testid","formatDate","HourlyWeather","TabPanel","props","children","other","role","hidden","Box","p","WeatherLanding","useParams","setConditions","React","window","localStorage","getItem","setUnits","useEffect","setItem","weatherApi","info","fetchWeather","useLocation","setValue","ignoreQueryPrefix","AppBar","position","Tabs","event","newValue","aria-label","Tab","label","ButtonGroup","theme","createMuiTheme","typography","fontFamily","join","App","ThemeProvider","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.808e8508.chunk.js","sourcesContent":["\nimport axios from \"axios\";\n\nconst apiKey = process.env.REACT_APP_PLACE_API_KEY;\n\nconst api = axios.create({\n  baseURL: 'https://api.opencagedata.com'\n});\n\nexport function search(searchText) {\n return api.get('/geocode/v1/json', {\n   params: {\n    key: apiKey,\n    q: searchText,\n    no_annotations: 1,\n    abbrv: 1\n   }\n }).then(response => response.data.results.map(({ formatted, geometry }) => ({\n  name: formatted,\n  lat: geometry.lat,\n  lon: geometry.lng\n })));\n}\n\n","import React, { useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport * as qs from 'qs';\nimport TextField from '@material-ui/core/TextField'; \nimport Button from '@material-ui/core/Button';\n\nimport * as places from '../../api/places';\nimport './index.scss';\n\nexport default function Search() {\n  const [locations, setLocations] = useState([]);\n  const [searchText, setSearchText] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const doSearch = async () => {\n    if (searchText) {\n      try {\n        setIsLoading(true);\n        const results = await places.search(searchText);\n        setIsLoading(false);\n        setLocations(results);\n        if (results.length === 0) {\n          setError('There were no results matching your search text');\n        } else {\n          setError();\n        }\n      } catch(e) {\n        setError(`There was an error trying to find matching locations`);\n      }\n    } else {\n      setLocations([]);\n    }\n  }\n\n  const keyPress = (e) => {\n    if (e.keyCode === 13) { \n      doSearch()\n    }\n  }\n\n  return (\n    <div id=\"Search\">\n      <div className=\"form\">\n        <div className=\"input\">\n          <TextField\n            name=\"searchText\"\n            placeholder=\"Weather Location\"\n            onChange={ e => setSearchText(e.target.value)}\n            onKeyDown={keyPress}\n            disabled={isLoading}\n          />\n        </div>\n        <div className=\"button\">\n          <Button variant=\"contained\" color=\"primary\" onClick={doSearch} disabled={isLoading}>\n            Search\n          </Button>\n        </div>\n      </div>\n      { error &&\n        <div className=\"results error\"> \n          {error}\n        </div>\n      }\n      {locations.length > 0 &&\n        <div className=\"results\">\n          Did you mean?\n          { locations.map(location => (\n            <div className=\"link\" key={location.name}>\n              <Link to={`/locations/lat/${location.lat}/lon/${location.lon}?${qs.stringify({ name: location.name })}`}>\n                { location.name }\n              </Link>\n            </div>\n          ))}\n        </div>\n      }\n    </div>\n  )\n}","\nimport axios from 'axios';\n// import toDate from 'date-fns/toDate';\nimport utcToZonedTime from 'date-fns-tz/utcToZonedTime';\n\n\nconst apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n\nconst api = axios.create({\n  baseURL: 'https://api.openweathermap.org/data/2.5'\n});\n\nconst convertDate = (dt, timezone) => utcToZonedTime(dt*1000, timezone);\n\nconst getIconUrl = (weather, useLarge) => `http://openweathermap.org/img/wn/${weather[0].icon}${useLarge? '@2x' : ''}.png`;\n\nconst extractCurrentWeather = ({ dt, temp, feels_like, humidity, uvi, wind_speed, weather }, timezone) => ({\n  temperature: temp,\n  description: weather[0].description,\n  feelsLike: feels_like,\n  humidity: humidity,\n  wind: wind_speed,\n  uvIndex: uvi,\n  icon: getIconUrl(weather, true),\n  date: convertDate(dt, timezone),\n});\n\nconst extractDailyForecast = (daily, timezone) => {\n  return daily.map(({ dt, sunrise, sunset, temp, humidity, weather, uvi }) => ({\n    min: temp.min,\n    max: temp.max,\n    description: weather[0].description,\n    humidity: humidity,\n    uvIndex: uvi,\n    icon: getIconUrl(weather),\n    date: convertDate(dt, timezone),\n    sunrise: convertDate(sunrise, timezone),\n    sunset: convertDate(sunset, timezone),\n  }));\n};\n\nconst extractHourlyForecast = (hourly, timezone) => {\n  return hourly.map(({ dt, temp, weather }) => ({\n    temperature: temp,\n    description: weather[0].description,\n    icon: getIconUrl(weather),\n    date: convertDate(dt, timezone),\n  }));\n};\n\nexport function getWeather({ lat, lon }, units='imperial') {\n  return api.get('/onecall', {\n    params: {\n      appid: apiKey,\n      lat,\n      lon,\n      units\n    }\n  }).then(({ data }) => data).then(({ current, hourly, daily, timezone }) => ({\n    current: extractCurrentWeather(current, timezone),\n    daily: extractDailyForecast(daily, timezone),\n    hourly: extractHourlyForecast(hourly, timezone),\n  }));\n}\n\n","export const displayTemp = (temp, units='imperial') => \n  `${Math.round(temp)}° ${units === 'metric' ? 'C' : 'F' }`;","import React from 'react';\n\nimport { displayTemp } from '../utils';\n\nexport default function CurrentWeather({ conditions, units ='imperial' }) {\n  if (!conditions) return null;\n  return (\n    <div id=\"CurrentWeather\">\n      <img src={conditions.icon} alt={conditions.description} className=\"weather-icon\" />\n      <div className=\"weather-description\">{ conditions.description }</div>\n      <h2> \n        {displayTemp(conditions.temperature, units)}   \n      </h2>\n      <div> Feels Like: {displayTemp(conditions.feelsLike, units)} </div>\n      <div> Humidity: {conditions.humidity}% </div>\n      <div> Wind Speed: {conditions.wind} { units === 'metric' ? 'm/s' : 'mph' } </div>\n      <div> UV Index: {conditions.uvIndex} </div>\n    </div>\n  )\n}\n\n","import React from 'react';\nimport formatDate from 'date-fns/format';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport { displayTemp } from '../utils';\n\nexport default function DailyWeather({ forecast, units ='imperial' }) {\n  if (!forecast) return null;\n  return (\n    <TableContainer id=\"DailyWeather\" className=\"weather-table-container\">\n      <Table size=\"small\" stickyHeader>\n        <TableHead>\n          <TableRow>\n            <TableCell> Date </TableCell>\n            <TableCell/>\n            <TableCell>Description</TableCell>\n            <TableCell>High/Low</TableCell>\n            <TableCell>Humidity</TableCell>\n            <TableCell>UV Index</TableCell>\n            <TableCell>Sunrise/Sunset</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          { forecast.map((conditions, index) => (\n            <TableRow key={conditions.date} data-testid={'day-'+index}>\n              <TableCell> {formatDate(conditions.date, 'eee P')}</TableCell>\n              <TableCell>\n                <img src={conditions.icon} alt={conditions.description} className=\"weather-icon\" />\n              </TableCell>\n              <TableCell className=\"weather-description\">{ conditions.description }</TableCell>\n              <TableCell> \n                {displayTemp(conditions.max, units)} / {displayTemp(conditions.min, units)}\n              </TableCell>\n              <TableCell> {conditions.humidity}% </TableCell>\n              <TableCell> {conditions.uvIndex} </TableCell>\n              <TableCell> {formatDate(conditions.sunrise, 'p')} / {formatDate(conditions.sunset, 'p')} </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\n","import React from 'react';\nimport formatDate from 'date-fns/format';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport { displayTemp } from '../utils';\n\nexport default function HourlyWeather({ forecast, units ='imperial' }) {  \n  if (!forecast) return null;\n  return (\n    <TableContainer id=\"HourlyWeather\" className=\"weather-table-container\">\n      <Table size=\"small\" stickyHeader>\n        <TableHead>\n          <TableRow>\n            <TableCell> Time </TableCell>\n            <TableCell/>\n            <TableCell>Description</TableCell>\n            <TableCell>Temperature</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          { forecast.map((conditions, index) => (\n            <TableRow key={conditions.date} data-testid={'hour-'+index}>\n              <TableCell> { formatDate(conditions.date, 'eee p')} </TableCell>\n              <TableCell>\n                <img src={conditions.icon} alt={conditions.description} className=\"weather-icon\" />\n              </TableCell>\n              <TableCell className=\"weather-description\"> {conditions.description} </TableCell>\n              <TableCell> {displayTemp(conditions.temperature, units)} </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport formatDate from 'date-fns/format';\nimport * as qs from \"qs\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport * as weatherApi from \"../../api/weather\";\nimport CurrentWeather from \"../current-weather\";\nimport DailyWeather from \"../daily-weather\";\nimport HourlyWeather from \"../hourly-weather\";\n\nimport './index.scss';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      className=\"tab-panel\"\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nexport default function WeatherLanding() {\n  const { lat, lon } = useParams();\n  const [conditions, setConditions] = useState();\n  const [units, setUnits] = React.useState(\n    () => window.localStorage.getItem('unitSystem') || 'imperial'\n  );\n  React.useEffect(() => {\n    window.localStorage.setItem('unitSystem', units)\n  }, [units])\n\n  useEffect(() => {\n    async function fetchWeather() {\n      if (lat != null && lon != null) {\n        const info = await weatherApi.getWeather({ lat, lon }, units);\n        setConditions(info);\n      }\n    }\n    fetchWeather();\n  }, [lat, lon, units]);\n\n  const { search } = useLocation();\n  \n\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  if (!conditions) return 'Loading Weather...';\n\n  let { name } = qs.parse(search, { ignoreQueryPrefix: true });\n  if (!name) {\n    name = `Latitude ${lat}, Longitude ${lon}`;\n  }\n\n  return (\n    <div id=\"WeatherLanding\">\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n          <Tab label=\"Current\" />\n          <Tab label=\"48 Hour\"  />\n          <Tab label=\"7 Day\"  />\n        </Tabs>\n      </AppBar>\n      <ButtonGroup color=\"secondary\" className=\"units-buttons\">\n          <Button onClick={() => setUnits('metric')}  variant={units=== 'metric' ? 'contained' : 'outlined'}>C</Button>\n          <Button onClick={() => setUnits('imperial')} variant={units=== 'imperial' ? 'contained' : 'outlined'}>F</Button>\n        </ButtonGroup>\n      <div className=\"title\"> \n        {name} at { formatDate(conditions.current.date, \"h:mm a 'Local Time on' MMMM d, y\")}\n \n      </div>\n\n      <TabPanel value={value} index={0}>\n        <CurrentWeather conditions={conditions.current} units={units} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <HourlyWeather forecast={conditions.hourly} units={units} />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <DailyWeather forecast={conditions.daily} units={units} />\n      </TabPanel>\n    </div>\n  );\n}","import React from 'react';\n\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport Search from '../search';\nimport WeatherLanding from '../weather-landing';\n\nimport './index.scss';\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      'monospace'\n    ].join(','),\n  },\n});\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <ThemeProvider theme={theme}>\n        <h1 className=\"header\">\n          <Link to=\"/\">Weather by Joel</Link>\n        </h1>\n        <Switch>\n          <Route path={'/locations/lat/:lat/lon/:lon'} component={WeatherLanding} />\n          <Route path={'/'} component={Search} />\n        </Switch>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport './index.scss';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}